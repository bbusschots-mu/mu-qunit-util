// Generated by uRequire v0.7.0-beta.33  template: 'combined'
// Combined template optimized with RequireJS/r.js v2.2.0 & almond v0.3.3.
(function (global, window){
  
var __isAMD = !!(typeof define === 'function' && define.amd),
    __isNode = (typeof exports === 'object'),
    __isWeb = !__isNode;


  var __nodeRequire = (__isNode ? require : function(dep){
        throw new Error("uRequire: combined template 'undefined', trying to load `node` dep `" + dep + "` in non-nodejs runtime (browser).")
      }),
      __throwMissing = function(dep, vars) {
        throw new Error("uRequire: combined template 'undefined', detected missing dependency `" + dep + "` - all it's known binding variables `" + vars + "` were undefined")
      },
      __throwExcluded = function(dep, descr) {
        throw new Error("uRequire: combined template 'undefined', trying to access unbound / excluded `" + descr + "` dependency `" + dep + "` on browser");
      };
var bundleFactory = function(is) {
/**
 * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.
 * Released under MIT license, http://github.com/requirejs/almond/LICENSE
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice,
        jsSuffixRegExp = /\.js$/;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
            foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name) {
            name = name.split('/');
            lastIndex = name.length - 1;

            // If wanting node ID compatibility, strip .js from end
            // of IDs. Have to do this here, and not in nameToUrl
            // because node allows either .js or non .js to map
            // to same file.
            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
            }

            // Starts with a '.' so need the baseName
            if (name[0].charAt(0) === '.' && baseParts) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that 'directory' and not name of the baseName's
                //module. For instance, baseName of 'one/two/three', maps to
                //'one/two/three.js', but we want the directory, 'one/two' for
                //this normalization.
                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                name = normalizedBaseParts.concat(name);
            }

            //start trimDots
            for (i = 0; i < name.length; i++) {
                part = name[i];
                if (part === '.') {
                    name.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    // If at the start, or previous value is still ..,
                    // keep them so that when converted to a path it may
                    // still work when converted to a path, even though
                    // as an ID it is less than ideal. In larger point
                    // releases, may be better to just kick out an error.
                    if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {
                        continue;
                    } else if (i > 0) {
                        name.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
            //end trimDots

            name = name.join('/');
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            var args = aps.call(arguments, 0);

            //If first arg is not require('string'), and there is only
            //one arg, it is the array form without a callback. Insert
            //a null so that the following concat is correct.
            if (typeof args[0] !== 'string' && args.length === 1) {
                args.push(null);
            }
            return req.apply(undef, args.concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    //Creates a parts array for a relName where first part is plugin ID,
    //second part is resource ID. Assumes relName has already been normalized.
    function makeRelParts(relName) {
        return relName ? splitPrefix(relName) : [];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relParts) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0],
            relResourceName = relParts[1];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relResourceName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relResourceName));
            } else {
                name = normalize(name, relResourceName);
            }
        } else {
            name = normalize(name, relResourceName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i, relParts,
            args = [],
            callbackType = typeof callback,
            usingExports;

        //Use name if no relName
        relName = relName || name;
        relParts = makeRelParts(relName);

        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relParts);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback ? callback.apply(defined[name], args) : undefined;

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, makeRelParts(callback)).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (config.deps) {
                req(config.deps, config.callback);
            }
            if (!callback) {
                return;
            }

            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        return req(cfg);
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {
        if (typeof name !== 'string') {
            throw new Error('See almond README: incorrect module build, no module name');
        }

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("almond", function(){});

define('is_js',[],function () {
  if (__isNode) {
  return __nodeRequire('is_js');
} else {
    return (typeof is !== 'undefined') ? is : __throwMissing('is_js', 'is')
}
});
define('muQUnitUtil',['require', 'exports', 'module', 'is_js'], function (require, exports, module) {
  var __umodule__ = (function (require, exports, module) {
  

const is = require("is_js");
const muQUnitUtil = { allDummyData: {} };
module.exports = muQUnitUtil;
class DummyData {
  constructor(desc, tags, val, type, tagPath) {
    if (!(is.string(desc) && is.not.empty(desc)))
      throw new TypeError("description must be a non-empty string");
    if (!(is.array(tags) && is.all.string(tags)))
      throw new TypeError("tags must be an array of strings");
    if (is.not.undefined(type) && is.not.string(type))
      throw new TypeError("if p, type must be a string");
    this._description = desc;
    this._tags = [...tags];
    this._value = val;
    this._tagLookup = {};
    this._type = type;
    this._tagPath = tagPath;
    for (const t of this._tags) {
      this._tagLookup[t] = true;
    }
  }
  get description() {
    return this._description;
  }
  get tags() {
    return this._tags;
  }
  get value() {
    return this._value;
  }
  get type() {
    return this._type;
  }
  get tagPath() {
    return this._tagPath;
  }
  hasTag(t) {
    if (is.not.string(t))
      throw new TypeError("tag must be a string");
    return this._tagLookup[t] ? true : false;
  }
}
function refreshDummyData(...dataGenerators) {
  const rawData = {
    "boolean": {
      "true": [
        "true",
        ["basic"],
        true
      ],
      "false": [
        "false",
        ["falsy"],
        false
      ]
    },
    "number": {
      "zero": [
        "the number zero",
        [
          "integer",
          "falsy"
        ],
        0
      ],
      "digit": [
        "a single-digit number",
        ["integer"],
        7
      ],
      "integer": [
        "a positive integer",
        ["basic"],
        12345
      ],
      "integer.2digit": [
        "a 2-digit number",
        [],
        42
      ],
      "integer.3digit": [
        "a 3-digit number",
        [],
        123
      ],
      "integer.4digit": [
        "a 4-digit number",
        [],
        1982
      ],
      "uts": [
        "a numeric Unix Time-stamp",
        [
          "datetime",
          "integer"
        ],
        1529660265
      ],
      "integer.negative": [
        "a negative integer",
        [],
        -12345
      ],
      "float": [
        "a positive floating point number",
        [],
        3.14
      ],
      "float.negative": [
        "a negative floating point number",
        [],
        -3.14
      ]
    },
    "string": {
      "empty": [
        "an empty string",
        ["falsy"],
        ""
      ],
      "word": [
        "a single-word string",
        ["basic"],
        "boogers"
      ],
      "line": [
        "a single-line string",
        [],
        "boogers and snot"
      ],
      "multiline": [
        "a multi-line string",
        [""],
        "boogers\nsnot\nbogeys"
      ],
      "zero": [
        "the character 0",
        [
          "integer",
          "numeric"
        ],
        "0"
      ],
      "digit": [
        "a single-digit string",
        [
          "integer",
          "numeric"
        ],
        "7"
      ],
      "integer": [
        "a positive integer string",
        ["numeric"],
        "12345"
      ],
      "integer.2digit": [
        "a 2-digit numeric string",
        ["numeric"],
        "42"
      ],
      "integer.3digit": [
        "a 3-digit numeric string",
        ["numeric"],
        "123"
      ],
      "integer.4digit": [
        "a 4-digit numeric string",
        ["numeric"],
        "1982"
      ],
      "uts": [
        "a Unix Time-stamp string",
        [
          "datetime",
          "numeric",
          "integer"
        ],
        "1529660265"
      ],
      "iso8601": [
        "an ISO8601 date & time string",
        ["datetime"],
        "2018-06-22T09:37:45z"
      ],
      "rfc2822": [
        "an RFC2822 date & time string",
        ["datetime"],
        "Fri, 22 Jun 2018 09:37:45 +0000"
      ],
      "jsdate": [
        "a JavaScript date & time string",
        ["datetime"],
        "2018-06-22T09:37:45.000Z"
      ],
      "integer.negative": [
        "a negative integer string",
        ["numeric"],
        "-12345"
      ],
      "float": [
        "a floating point numeric string",
        ["numeric"],
        "3.14"
      ],
      "float.negative": [
        "a negative floating point numeric string",
        ["numeric"],
        "-3.14"
      ]
    },
    "array": {
      "empty": [
        "an empty array",
        ["object"],
        []
      ],
      "basic": [
        "an array of primitives",
        [
          "object",
          "basic"
        ],
        [
          true,
          42,
          "boogers"
        ]
      ]
    },
    "function": {
      "void": [
        "a void function",
        [
          "object",
          "basic"
        ],
        function () {
        }
      ]
    },
    "error": {
      "Error": [
        "a generic error",
        [
          "object",
          "basic"
        ],
        new Error("a generic error")
      ],
      "TypeError": [
        "a type error",
        ["object"],
        new TypeError("a type error")
      ],
      "RangeError": [
        "a range error",
        ["object"],
        new TypeError("a range error")
      ]
    },
    "object": {
      "null": [
        "null",
        [
          "empty",
          "falsy",
          "basic"
        ],
        null
      ],
      "empty": [
        "empty object",
        ["plain"],
        {}
      ],
      "plain": [
        "a plain object",
        ["basic"],
        {
          a: "b",
          c: 42,
          d: true
        }
      ],
      "jsdate": [
        "a date object",
        ["datetime"],
        new Date("2018-06-22T09:37:45.000Z")
      ],
      "jsdate.now": [
        "a date object",
        ["datetime"],
        new Date()
      ]
    },
    "other": {
      "undefined": [
        "undefined",
        [
          "empty",
          "falsy",
          "basic"
        ],
        undefined
      ]
    }
  };
  const ans = {};
  for (const t of Object.keys(rawData)) {
    ans[t] = {};
    for (const tp of Object.keys(rawData[t])) {
      ans[t][tp] = new DummyData(rawData[t][tp][0], [
        ...tp.split("."),
        ...rawData[t][tp][1]
      ], rawData[t][tp][2], t, tp);
    }
  }
  for (const genFn of dataGenerators) {
    try {
      const extraData = genFn();
      if (is.not.object(extraData))
        throw new TypeError("generator did not return an object");
      for (const t of Object.keys(extraData)) {
        if (is.not.object(extraData[t]))
          throw new TypeError(`generatedData['${ t }'] is not an object`);
        if (is.undefined(ans[t]))
          ans[t] = {};
        for (const tp of Object.keys(extraData[t])) {
          if (is.not.array(extraData[t][tp]))
            throw new TypeError(`generatedData['${ t }']['${ tp }'] is not an array`);
          if (is.not.string(extraData[t][tp][0]))
            throw new TypeError(`generatedData['${ t }']['${ tp }'][0] is not a string`);
          if (is.not.array(extraData[t][tp][1]) || !is.all.string(extraData[t][tp][1]))
            throw new TypeError(`generatedData['${ t }']['${ tp }'][1] is not an array of strings`);
          ans[t][tp] = new DummyData(extraData[t][tp][0], [
            ...tp.split("."),
            ...extraData[t][tp][1]
          ], extraData[t][tp][2], t, tp);
        }
      }
    } catch (err) {
      throw new Error(`failed to load additional data from genereator function with error: ${ err.message }`);
    }
  }
  muQUnitUtil.allDummyData = ans;
}
muQUnitUtil.refreshDummyData = refreshDummyData;
function dummyData(path, opts) {
  if (!(is.string(path) && is.not.empty(path)))
    throw new TypeError("path must be a non-empty string");
  if (is.not.object(opts))
    opts = {};
  const pathParts = path.split(".");
  const reqType = pathParts[0];
  if (reqType !== "*") {
    if (is.not.object(muQUnitUtil.allDummyData[reqType]))
      return pathParts.length === 1 ? [] : undefined;
  }
  if (pathParts.length > 1)
    return muQUnitUtil.allDummyData[reqType][pathParts.slice(1).join(".")];
  const typesToFetch = [];
  if (reqType === "*") {
    const typeSkipLookup = {};
    if (is.array(opts.excludeTypes)) {
      for (const t of opts.excludeTypes)
        typeSkipLookup[t] = true;
    }
    for (const t of Object.keys(muQUnitUtil.allDummyData)) {
      if (!typeSkipLookup[t])
        typesToFetch.push(t);
    }
  } else {
    typesToFetch.push(reqType);
  }
  const defSkipLookup = {};
  if (is.array(opts.excludeDefinitions)) {
    for (const dp of opts.excludeDefinitions)
      defSkipLookup[dp] = true;
  }
  const ans = [];
  const doCheckTags = is.array(opts.excludeTags);
  for (const t of typesToFetch) {
    processTypeDummyData:
      for (const tp of Object.keys(muQUnitUtil.allDummyData[t])) {
        if (doCheckTags) {
          for (const et of opts.excludeTags) {
            if (muQUnitUtil.allDummyData[t][tp].hasTag(et))
              continue processTypeDummyData;
          }
        }
        if (!defSkipLookup[`${ t }.${ tp }`])
          ans.push(muQUnitUtil.allDummyData[t][tp]);
      }
  }
  return ans;
}
muQUnitUtil.dummyData = dummyData;
function dummyDataExcept(excludeTypes, excludeTags, excludeDefinitions) {
  if (is.not.array(excludeTypes))
    excludeTypes = [];
  if (is.not.array(excludeTags))
    excludeTags = [];
  if (is.not.array(excludeDefinitions))
    excludeDefinitions = [];
  return dummyData("*", {
    excludeTypes,
    excludeTags,
    excludeDefinitions
  });
}
muQUnitUtil.dummyDataExcept = dummyDataExcept;
function dummyBasicData() {
  return dummyDataWithAnyTag("basic");
}
muQUnitUtil.dummyBasicData = dummyBasicData;
function dummyBasicPrimitives() {
  const ans = [];
  for (const dd of dummyBasicData()) {
    if (dd.type != "object" && !dd.hasTag("object"))
      ans.push(dd);
  }
  return ans;
}
muQUnitUtil.dummyBasicPrimitives = dummyBasicPrimitives;
function dummyBasicDataExcept(...excludeTypes) {
  const excludeLookup = {};
  for (const et of excludeTypes)
    excludeLookup[et] = true;
  const ans = [];
  for (const dd of dummyBasicData()) {
    if (!excludeLookup[dd.type]) {
      ans.push(dd);
    }
  }
  return ans;
}
muQUnitUtil.dummyBasicDataExcept = dummyBasicDataExcept;
function dummyBasicPrimitivesExcept(...excludeTypes) {
  const excludeLookup = {};
  for (const et of excludeTypes)
    excludeLookup[et] = true;
  const ans = [];
  for (const dd of dummyBasicPrimitives()) {
    if (!excludeLookup[dd.type]) {
      ans.push(dd);
    }
  }
  return ans;
}
muQUnitUtil.dummyBasicPrimitivesExcept = dummyBasicPrimitivesExcept;
function dummyDataByType(...typeList) {
  if (!is.all.string(typeList))
    throw new TypeError("all specified types must be strings");
  const ans = [];
  for (const t of typeList) {
    if (is.object(muQUnitUtil.allDummyData[t]))
      ans.push(...Object.values(muQUnitUtil.allDummyData[t]));
  }
  return ans;
}
muQUnitUtil.dummyDataByType = dummyDataByType;
function dummyDataWithAnyTag(...tagList) {
  if (!is.all.string(tagList))
    throw new TypeError("all specified tags must be strings");
  const ans = [];
  for (const td of Object.values(muQUnitUtil.allDummyData)) {
    for (const dd of Object.values(td)) {
      let anyPresent = false;
      for (const t of tagList) {
        if (dd.hasTag(t)) {
          anyPresent = true;
          break;
        }
      }
      if (anyPresent)
        ans.push(dd);
    }
  }
  return ans;
}
muQUnitUtil.dummyDataWithAnyTag = dummyDataWithAnyTag;
function dummyDataWithAllTags(...tagList) {
  if (!is.all.string(tagList))
    throw new TypeError("all specified tags must be strings");
  const ans = [];
  for (const td of Object.values(muQUnitUtil.allDummyData)) {
    for (const dd of Object.values(td)) {
      let allPresent = true;
      for (const t of tagList) {
        if (!dd.hasTag(t)) {
          allPresent = false;
          break;
        }
      }
      if (allPresent)
        ans.push(dd);
    }
  }
  return ans;
}
muQUnitUtil.dummyDataWithAllTags = dummyDataWithAllTags;
refreshDummyData();

return module.exports;

}).call(this, require, exports, module);
var __old__mu_qunit_util0 = window['muQUnitUtil'];
if (!__isAMD && !__isNode) {window['muQUnitUtil'] = __umodule__;

__umodule__.noConflict = function () {
  window['muQUnitUtil'] = __old__mu_qunit_util0;
return __umodule__;
};
}return __umodule__;
});
    return require('muQUnitUtil');

};
if (__isAMD) {
  return define(['is_js'], bundleFactory);
} else {
    if (__isNode) {
        return module.exports = bundleFactory(require('is_js'));
    } else {
        return bundleFactory((typeof is !== 'undefined') ? is : __throwMissing('is_js', 'is'));
    }
}
}).call(this, (typeof exports === 'object' || typeof window === 'undefined' ? global : window),
              (typeof exports === 'object' || typeof window === 'undefined' ? global : window))
